name: "[./.github/workflows/travis-build.yaml]"

on:
  workflow_call:
    inputs:
      get_testing_compiled_archives: 
        description: 'Is this built used for a release ?'
        required: true
        default: false 
        type: boolean
      get_all_archives_for_release: 
        description: 'Needs a release to test in runner ?'
        required: false
        default: false 
        type: boolean
      mvn_extra_arguments: 
        required: false
        default: "" 
        type: string
      new_release_tag:
        description: "The tag of the release to publish (YYYY.MM.0)"
        type: string
        required: false
        default: "2024.03.0"
      jdk_embedded_version:
        type: string
        required: false
      IS_STABLE_RELEASE: 
        type: boolean
    secrets:
      GAMA_KEYSTORE_BASE64:
        required: false
      GAMA_KEYSTORE_STOREPASS:
        required: false
      GAMA_SERVER_USERNAME:
        required: false
      GAMA_SERVER_PASSWORD:
        required: false
      GAMA_SERVER_SSH_PRIVATE_KEY:
        required: false
      GAMA_SERVER_SSH_KNOWN_HOSTS:
        required: false

jobs:
  compilation: 
    runs-on: ubuntu-latest
    steps:

      # Prep runner

      - uses: actions/checkout@v4
      
      - name: Set up Adopt OpenJDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          java-package: jdk

      - name: Set custom runner parameters
        run: |
          echo "MAVEN_OPTS='-Dorg.slf4j.simpleLogger.defaultLogLevel=error -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xmx15g'" >> ~/.mavenrc
          sudo chmod +x $GITHUB_WORKSPACE/travis/*

      # Prep release

      - name: Tag GAMA with new release 
        if: "${{ inputs.get_all_archives_for_release }}"
        run: |
          bash $GITHUB_WORKSPACE/travis/bumpGamaVersion.sh ${{ inputs.new_release_tag }} ${{ inputs.IS_STABLE_RELEASE }}
        env:
          JDK_EMBEDDED_VERSION: ${{ inputs.jdk_embedded_version }}

      - name: Import & Prepare JAR signing
        if: "${{ inputs.get_all_archives_for_release }}"
        run: |
          echo "$GAMA_KEYSTORE_BASE64" | base64 --decode > ~/gama.keystore
          # Config file
          sed -i "s/<storepass>GAMA_PLATFORM/<storepass>$GAMA_STORE/g" $GITHUB_WORKSPACE/gama.annotations/pom.xml
          sed -i "s/<storepass>GAMA_PLATFORM/<storepass>$GAMA_STORE/g" $GITHUB_WORKSPACE/gama.processor/pom.xml
          sed -i "s/<storepass>GAMA_PLATFORM/<storepass>$GAMA_STORE/g" $GITHUB_WORKSPACE/gama.parent/pom.xml
          # Trigger jar signing plugin
          touch $GITHUB_WORKSPACE/sign.maven
        env:
          GAMA_KEYSTORE_BASE64: ${{ secrets.GAMA_KEYSTORE_BASE64 }}
          GAMA_STORE: ${{ secrets.GAMA_KEYSTORE_STOREPASS }}

      # 
      # ██████╗ ██╗   ██╗██╗██╗     ██████╗ ██╗███╗   ██╗ ██████╗ 
      # ██╔══██╗██║   ██║██║██║     ██╔══██╗██║████╗  ██║██╔════╝ 
      # ██████╔╝██║   ██║██║██║     ██║  ██║██║██╔██╗ ██║██║  ███╗
      # ██╔══██╗██║   ██║██║██║     ██║  ██║██║██║╚██╗██║██║   ██║
      # ██████╔╝╚██████╔╝██║███████╗██████╔╝██║██║ ╚████║╚██████╔╝
      # ╚═════╝  ╚═════╝ ╚═╝╚══════╝╚═════╝ ╚═╝╚═╝  ╚═══╝ ╚═════╝                                                       
      # 

      - name: Compiling gama
        run: bash $GITHUB_WORKSPACE/travis/build.sh -e -B ${{ inputs.mvn_extra_arguments }}

      - name: Install SSH key
        # Consider it's a release and want to update p2 site for it
        if: "${{ inputs.get_all_archives_for_release }}"
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.GAMA_SERVER_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.GAMA_SERVER_SSH_KNOWN_HOSTS }}
          if_key_exists: replace # replace / ignore / fail; optional (defaults to fail)

      - name: Deploy p2 GAMA's module
        # Consider it's a release and want to update p2 site for it
        if: "${{ inputs.get_all_archives_for_release }}"
        env:
          GAMA_SERVER_USERNAME: ${{ secrets.GAMA_SERVER_USERNAME }}
          GAMA_SERVER_PASSWORD: ${{ secrets.GAMA_SERVER_PASSWORD }}
        run: |
          echo "Publishing p2 repository"
          sed -i "s/<username>GAMA_PASS/<username>$GAMA_SERVER_USERNAME/g" $GITHUB_WORKSPACE/travis/settings.xml
          sed -i "s/<password>GAMA_PASS/<password>$GAMA_SERVER_PASSWORD/g" $GITHUB_WORKSPACE/travis/settings.xml
          bash $GITHUB_WORKSPACE/travis/deploy-p2.sh -e
          echo "Publishing m2 repository"
          cd ~/.m2/repository
          rm -fr org/gama/gama.product org/gama/gama.p2site .cache
          rsync -avPq -e ssh . $GAMA_SERVER_USERNAME@51.255.46.42:/var/www/gama_updates/0.0.0

      - name: Export linux release
        uses: actions/upload-artifact@v4
        if: "${{ inputs.get_testing_compiled_archives }}"
        with:
          name: gama-compiled-archive
          if-no-files-found: error
          compression-level: 0
          overwrite: true
          path: |
            ${{ github.workspace }}/gama.product/target/products/gama.application-linux.gtk.x86_64.tar.gz

      - name: Export every releases
        uses: actions/upload-artifact@v4
        if: "${{ inputs.get_all_archives_for_release }}"
        with:
          name: gama-compiled-archive
          if-no-files-found: error
          compression-level: 0
          overwrite: true
          path: |
            ${{ github.workspace }}/gama.product/target/products/gama.application-*
