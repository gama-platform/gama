<?xml version="1.0" encoding="UTF-8"?><!---->
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:wiki="www.google.fr">
<xsl:import href="docGama-utils-xml2md.xsl" />


<xsl:variable name="fileOperatorsAA" select="'OperatorsAA'" />
<xsl:variable name="fileOperatorsBC" select="'OperatorsBC'" />
<xsl:variable name="fileOperatorsDH" select="'OperatorsDH'" />
<xsl:variable name="fileOperatorsIM" select="'OperatorsIM'" />
<xsl:variable name="fileOperatorsNR" select="'OperatorsNR'" />
<xsl:variable name="fileOperatorsSZ" select="'OperatorsSZ'" />
<xsl:variable name="fileStatements" select="'Statements'" />
<xsl:variable name="fileUnitsConstants" select="'UnitsAndConstants'" />
<xsl:variable name="fileControl" select="'BuiltInControlArchitectures'" />
<xsl:variable name="fileSpecies" select="'BuiltInSpecies'" />
<xsl:variable name="fileSkills" select="'BuiltInSkills'" />

<xsl:variable name="lowercase" select="'abcdefghijklmnopqrstuvwxyz'" />
<xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
<xsl:variable name="space" select="' '" />
<xsl:variable name="minus" select="'-'" />


<xsl:template match="/">

# Exhaustive list of GAMA Keywords

----

**This file is automatically generated from java files. Do Not Edit It.**

----

## Operators
<xsl:for-each select="/doc/operators/operator">
	<xsl:sort select="@name" />
	<xsl:text>[</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>](</xsl:text>
	<xsl:choose>
		<xsl:when test="@alphabetOrder = 'aa'">
			<xsl:value-of select="$fileOperatorsAA" />
		</xsl:when>
		<xsl:when test="@alphabetOrder = 'bc'">
			<xsl:value-of select="$fileOperatorsBC" />
		</xsl:when>
		<xsl:when test="@alphabetOrder = 'dh'">
			<xsl:value-of select="$fileOperatorsDH" />
		</xsl:when>
		<xsl:when test="@alphabetOrder = 'im'">
			<xsl:value-of select="$fileOperatorsIM" />
		</xsl:when>
		<xsl:when test="@alphabetOrder = 'nr'">
			<xsl:value-of select="$fileOperatorsNR" />
		</xsl:when>
		<xsl:otherwise>
			<xsl:value-of select="$fileOperatorsSZ" />
		</xsl:otherwise>
	</xsl:choose>
	<xsl:text>#</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>), </xsl:text>
</xsl:for-each>

----

## Statements
<xsl:for-each select="/doc/statements/statement">
	<xsl:sort select="@name" />
	<xsl:text>[</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>](</xsl:text>
	<xsl:value-of select="$fileStatements" />
	<xsl:text>#</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>), </xsl:text>
</xsl:for-each>

----

## Architectures
<xsl:for-each select="/doc/architectures/architecture">
	<xsl:sort select="@name" />
	<xsl:text>[</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>](</xsl:text>
	<xsl:value-of select="$fileControl" />
	<xsl:text>#</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>), </xsl:text>
</xsl:for-each>

----

## Constants and colors
<xsl:for-each select="/doc/constants/constant">
	<xsl:sort select="@name" />

	<xsl:text>[</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>](</xsl:text>
	<xsl:value-of select="$fileUnitsConstants" />
	<xsl:text>#</xsl:text>
	<xsl:value-of select="translate(translate(categories/category/@id, $uppercase, $lowercase), $space, $minus)" />	
	<xsl:text>)</xsl:text>
	<xsl:if test="@altNames">
		<xsl:text> (</xsl:text>
		<xsl:value-of select="@altNames" />
		<xsl:text>)</xsl:text>
	</xsl:if>
	<xsl:text>, </xsl:text>
</xsl:for-each>

----

## Skills
<xsl:for-each select="/doc/skills/skill">
	<xsl:sort select="@name" />
	<xsl:text>[</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>](</xsl:text>
	<xsl:value-of select="$fileSkills" />
	<xsl:text>#</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>), </xsl:text>

</xsl:for-each>

----

## Species
<xsl:for-each select="/doc/speciess/species">
	<xsl:sort select="@name" />
	<xsl:text>[</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>](</xsl:text>
	<xsl:value-of select="$fileSpecies" />
	<xsl:text>#</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>), </xsl:text>
</xsl:for-each>
[world](BuiltInSpecies#model )

----

## Actions
<xsl:for-each select="/doc/speciess/species">
	<xsl:sort select="@name" />
	<xsl:for-each select="actions/action">
		<xsl:text>[</xsl:text>
		<xsl:value-of select="@name" />
		<xsl:text>](</xsl:text>
		<xsl:value-of select="$fileSpecies" />
		<xsl:text>#</xsl:text>
		<xsl:value-of select="@name" />
		<xsl:text>), </xsl:text>
	</xsl:for-each>
</xsl:for-each>

<xsl:for-each select="/doc/skills/skill">
	<xsl:sort select="@name" />
	<xsl:for-each select="actions/action">
		<xsl:text>[</xsl:text>
		<xsl:value-of select="@name" />
		<xsl:text>](</xsl:text>
		<xsl:value-of select="$fileSkills" />
		<xsl:text>#</xsl:text>
		<xsl:value-of select="@name" />
		<xsl:text>), </xsl:text>
	</xsl:for-each>
</xsl:for-each>

----

## Variables
<xsl:for-each select="/doc/skills/skill">
	<xsl:sort select="@name" />
	<xsl:for-each select="vars/var">
		<xsl:text>[</xsl:text>
		<xsl:value-of select="@name" />
		<xsl:text>](</xsl:text>
		<xsl:value-of select="$fileSkills" />
		<xsl:text>), </xsl:text>
	</xsl:for-each>
</xsl:for-each>

----

## Pseudo-Variables

[self](PseudoVariables#self ), [myself](PseudoVariables#myself ), [each](PseudoVariables#each)

----

## Types
<xsl:for-each select="/doc/types/type">
	<xsl:sort select="@name" />
	<xsl:text>[</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>](DataTypes#</xsl:text><xsl:value-of select="@name" />
	<xsl:text>), </xsl:text>	
</xsl:for-each>

----

## [the world](GlobalSpecies)
[torus](GlobalSpecies), [Environment Size](GlobalSpecies#Environment_Size),
[world](GlobalSpecies#world), [time](GlobalSpecies#time)
[cycle](GlobalSpecies#cycle ), [step](GlobalSpecies#step),
[time](GlobalSpecies#time), [duration](GlobalSpecies#duration),
[total_duration](GlobalSpecies#total_duration)
[average_duration](GlobalSpecies#average_duration),
[machine_time](GlobalSpecies#machine_time),
[agents](GlobalSpecies#agents), [stop](GlobalSpecies#halt),
[halt](GlobalSpecies#halt), [pause](GlobalSpecies#pause),
[scheduling](GlobalSpecies#scheduling)

----

## Grid
[grid_x](GridSpecies#grid_x), [grid_y](GridSpecies#grid_y), [agents](GridSpecies#agents),
[color](GridSpecies#color), [grid_value](GridSpecies#grid_value)

----

## Other concepts
[scheduling](RuntimeConcepts#Scheduling_of_Agents ), [step](RuntimeConcepts#agents-step), [Key concepts](BasicProgrammingConceptsInGAML),
[Object-oriented paradigm to GAML](Introduction#vocabulary-correspondence-with-the-object-oriented-paradigm-as-in-java), [Correspondence GAML and Netlogo](Introduction#vocabulary-correspondence-with-the-agent-based-paradigm-as-in-netlogo)


</xsl:template>


</xsl:stylesheet>
