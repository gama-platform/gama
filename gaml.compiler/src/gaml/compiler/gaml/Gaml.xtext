grammar gaml.compiler.Gaml hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate gaml "http://www.compiler.gaml/Gaml"

Entry:
	->Model | StringEvaluator | StandaloneBlock | ExperimentFileStructure;

StandaloneBlock:
	'__synthetic__' block=Block;

StringEvaluator:
	toto=ID "<-" expr=Expression;

Model:
	(pragmas+=Pragma)* 'model' name=ID (imports+=Import)* block=ModelBlock;

ModelBlock returns Block:
	{Block} (statements+=(S_Section))*;

Import:
	'import' importURI=STRING ("as" name=Valid_ID)?; // must be named importURI

Pragma:
	'@' (name=ID ('[' plugins=ExpressionList? ']')?);

/**
 * Experiment files
 */
ExperimentFileStructure:
	exp=HeadlessExperiment;

HeadlessExperiment:
	key=_ExperimentKey (firstFacet="name:")? name=(Valid_ID | STRING) ('model:' importURI=STRING)? (facets+=Facet)*
	(block=Block | ';');

/**
 * Global statements
 */
S_Section returns Statement:
	S_Global | S_Species | S_Experiment;

S_Global:
	key="global" (facets+=Facet)* (block=Block | ';');

S_Species:
	key=_SpeciesKey (firstFacet='name:')? name=ID (facets+=Facet)* (block=Block | ';');

S_Experiment:
	key=_ExperimentKey (firstFacet="name:")? name=(Valid_ID | STRING) (facets+=Facet)* (block=Block | ';');

/**
 * Statements
 */
Statement:
	(=> S_ActionCall | (=> S_Declaration | 
	((=> S_Assignment | S_1Expr_Facets_BlockOrEnd | S_Other | S_Do | S_Return | S_Solve | S_If | S_Try | S_Equations))))
	| S_Display;

S_1Expr_Facets_BlockOrEnd returns Statement:
	key=_1Expr_Facets_BlockOrEnd_Key (firstFacet=FirstFacetKey)? (expr=Expression) (facets+=Facet)* (block=Block | ";");

S_Do:
	key=_DoKey (firstFacet="action:")? expr=AbstractRef (facets+=Facet)* (block=Block | ';');
	
		
S_ActionCall returns S_Do:
	target=VariableRef key='.' expr=ActionRef '(' right=ExpressionList? ')'';'
;

S_Loop:
	key="loop" (name=ID)? (facets+=Facet)* block=Block;

S_If:
	key='if' (firstFacet="condition:")? expr=Expression block=Block (->'else' else=(S_If | Block))?;

S_Try:
	key='try' block=Block (->'catch' catch=Block)?;

S_Other:
	key=ID (facets+=Facet)* (block=Block | ';');

S_Return:
	key='return' (firstFacet="value:")? expr=Expression? ';';

/*
 * DECLARATIONS
 */
S_Declaration:
	->S_Definition | S_Species | S_Reflex | S_Action | S_Var | S_Loop;

S_Reflex:
	key=_ReflexKey ((firstFacet="name:")? name=Valid_ID)? ("when" ":" expr=Expression)? block=Block;

S_Definition:
	tkey=(TypeRef) (firstFacet="name:")? name=(Valid_ID | STRING) ('(' (args=ActionArguments) ')')? (facets+=Facet)*
	(block=Block | ';');

S_Action returns S_Definition:
	{S_Action} key="action" (firstFacet='name:')? name=Valid_ID ('(' (args=ActionArguments) ')')? (facets+=Facet)*
	(block=Block | ';');

S_Var returns S_Definition:
	{S_Var} key=_VarOrConstKey (firstFacet="name:")? name=Valid_ID (facets+=Facet)* ';';

/*
 * ASSIGNMENTS
 */
S_Assignment:
	S_DirectAssignment | S_Set;

S_DirectAssignment:
	(expr=Expression key=(_AssignmentKey) value=Expression (facets+=Facet)*) ';';

S_Set:
	key="set" expr=Expression ("value:" | "<-") value=Expression ";";

S_Equations:
	key=_EquationsKey name=Valid_ID (facets+=Facet)* ('{' (equations+=S_Equation ';')* '}' | ';');

S_Equation returns S_Assignment:
	expr=(Function | VariableRef) key="=" value=Expression;

S_Solve:
	key=_SolveKey (firstFacet="equation:")? expr=EquationRef (facets+=Facet)* (block=Block | ';');

/**
 * DISPLAYS
 */
S_Display:
	key="display" (firstFacet="name:")? name=(Valid_ID | STRING) (facets+=Facet)* block=displayBlock;

displayBlock returns Block:
	{Block} '{' (statements+=displayStatement)* '}';

displayStatement returns Statement:
	=>speciesOrGridDisplayStatement | (=>imageDisplayStatement | Statement);

speciesOrGridDisplayStatement:
	key=_SpeciesKey expr=Expression (facets+=Facet)* (block=displayBlock | ";");
	
imageDisplayStatement:
	key = _ImageLayerKey  expr=Expression (facets+=Facet)* ";";

/**
 * Statement keys
 */
_EquationsKey:
	"equation";

_SolveKey:
	"solve";

_SpeciesKey:
	"species" | "grid" | "type" | "skill" | "class";
	
_ImageLayerKey: "image";

_ExperimentKey:
	"experiment";

_1Expr_Facets_BlockOrEnd_Key:
	_LayerKey | "ask" | "release" | "capture" | "create" | "write" | "error" | "warn" | "exception" | "save" | "assert"
	| "inspect" | "browse" | "restore" |
	"draw" | "using" | "switch" | "put" | "add" | "remove" | "match" | "match_between" | "match_one" | "parameter" |
	"status" | "highlight" | "focus_on" | "layout";

_LayerKey:
	"light" | "camera" | "text" | "image_layer" | "data" | "chart" | "agents" | "graphics" | "display_population" |
	"display_grid" | "event" | "overlay" | "datalist" | "mesh";

_DoKey:
	"do" | "invoke";

_VarOrConstKey:
	"var" | "const" | "let" | "arg";

_ReflexKey:
	"init" | "reflex" | "aspect";

_AssignmentKey:
	"<-" | "<<" | '>' '>' | "<<+" | '>' '>-' | "+<-" | "<+" | ">-";

/**
 * Parameters and arguments
 */
//Parameters:
//	{Parameters} (params=ParameterList)?;
ActionArguments:
	args+=ArgumentDefinition (',' args+=ArgumentDefinition)*;

ArgumentDefinition:
	type=(TypeRef) name=Valid_ID ('<-' default=Expression)?;

/**
 * Facets
 */
Facet:
	ActionFacet | DefinitionFacet | ClassicFacet | TypeFacet | VarFacet | FunctionFacet;

FirstFacetKey:
	DefinitionFacetKey | TypeFacetKey | SpecialFacetKey | VarFacetKey | ActionFacetKey | ClassicFacetKey;

ClassicFacetKey:
	(ID ':');

DefinitionFacetKey:
	"name:" | "returns:"; 

TypeFacetKey:
	("as:" | "of:" | "parent:" | "species:" | "type:");

SpecialFacetKey:
	'camera:' | 'data:' | 'when' ':' | "const:" | "value:" | "topology:" | "item:" | "init:" | "message:" | "control:" |
	"layout:" | "environment:" | 'text:' | 'image:' | 'using:' | "parameter:" | "aspect:" | "light:";

ActionFacetKey:
	"action:" | "on_change:";

VarFacetKey:
	"var:";

ClassicFacet returns Facet:
	(key=ClassicFacetKey | key='<-' | key=SpecialFacetKey) expr=Expression;

DefinitionFacet returns Facet:
	((->key=DefinitionFacetKey) name=(Valid_ID | STRING));

FunctionFacet returns Facet:
	key='->' (=>(expr=Expression) | ('{' expr=Expression '}'));

TypeFacet returns Facet:
	key=TypeFacetKey (->(expr=TypeRef) | expr=Expression);

ActionFacet returns Facet:
	key=ActionFacetKey (expr=ActionRef | block=Block);

VarFacet returns Facet:
	key=VarFacetKey expr=VariableRef;

/**
 * Blocks. An ordered list of statements inside curly brackets
 */
Block:
	{Block} '{' ((statements+=Statement)* '}');

/**
 * Expressions
 */
Expression:
	ArgumentPair | Pair;

BinaryOperator returns Expression:
	Or | And | Cast | Comparison | Addition | Multiplication | Exponentiation | Binary | Pair | Unit;

ArgumentPair:
	=> (op=(Valid_ID) '::' | op=(DefinitionFacetKey | TypeFacetKey | SpecialFacetKey | ActionFacetKey | VarFacetKey) ':'
	)? right=Pair;

Pair returns Expression:
	If
	({BinaryOperator.left=current}
	op='::'
	right=If)?;

If returns Expression:
	Or
	({If.left=current}
	op='?'
	right=Or
	(':'
	ifFalse=Or))?;

Or returns Expression:
	And
	({BinaryOperator.left=current}
	op='or'
	right=And)*;

And returns Expression:
	Cast
	({BinaryOperator.left=current}
	op='and'
	right=Cast)*;

Cast returns Expression:
	Comparison
	(({BinaryOperator.left=current}
	op='as') ((right=TypeRef) | ('(' right=TypeRef ')')))?;

Comparison returns Expression:
	Addition
	(({BinaryOperator.left=current}
	op=('!=' | '=' | '>=' | '<=' | '<' | '>'))
	right=Addition)?;

Addition returns Expression:
	Multiplication
	(({BinaryOperator.left=current} op=('+' | '-'))
	right=Multiplication)*;

Multiplication returns Expression:
	Exponentiation
	(({BinaryOperator.left=current} op=('*' | '/')) right=Exponentiation)*;

Exponentiation returns Expression:
	Binary
	(({BinaryOperator.left=current} op=('^')) right=Binary)*;

Binary returns Expression:
	Unit
	(({BinaryOperator.left=current} op=(Valid_ID)) right=Unit)*;

Unit returns Expression:
	Unary
	(({Unit.left=current} op=("#")) right=UnitRef)?;

Unary returns Expression:
	Access |
	{Unary} ((op=('#') right=UnitRef) | (op=('-' | '!' | 'not')
	right=Unary));

Access returns Expression:
	Primary ({Access.left=current} ((op='[' right=ExpressionList? ']') | (op="." right=(Primary ))))*
;


Primary returns Expression:
	TerminalExpression |
	AbstractRef |
	'(' ExpressionList ')' |
	'[' {Array} exprs=ExpressionList? ']' |
	'{' {Point} left=Expression op=',' right=Expression (',' z=Expression)? '}';

AbstractRef returns Expression:
	=>Function | VariableRef;

Function returns Expression:
	{Function} (left=ActionRef) (type=TypeInfo)? '(' right=ExpressionList? ')';

ExpressionList:
	(exprs+=Expression (',' exprs+=Expression)*) | (exprs+=Parameter (',' exprs+=Parameter)*);

Parameter returns Expression:
	{Parameter} ((builtInFacetKey=(DefinitionFacetKey | TypeFacetKey | SpecialFacetKey | ActionFacetKey | VarFacetKey))
	| (left=VariableRef ':')) right=Expression;

UnitRef returns Expression:
	{UnitName} ref=[UnitFakeDefinition|ID];

VariableRef:
	{VariableRef} ref=[VarDefinition|Valid_ID];

// Necessary to add "image" hardcoded here, because of the existence of the "image" layer
TypeRef returns Expression:
	{TypeRef} (ref=[TypeDefinition|ID] parameter=TypeInfo?) | {TypeRef} ("species" parameter=TypeInfo) | {TypeRef} ("image");

TypeInfo:
	('<' first=TypeRef ("," second=TypeRef)? ->'>');

SkillRef returns Expression:
	{SkillRef} ref=[SkillFakeDefinition|ID];

ActionRef returns Expression:
	{ActionRef} ref=[ActionDefinition|Valid_ID];

EquationRef returns Expression:
	{EquationRef} ref=[EquationDefinition|Valid_ID];

GamlDefinition:
	TypeDefinition | VarDefinition | UnitFakeDefinition | SkillFakeDefinition | ActionDefinition | EquationDefinition;

EquationDefinition:
	S_Equations | EquationFakeDefinition;

TypeDefinition:
	S_Species | TypeFakeDefinition;

VarDefinition:
	=>S_Declaration | (Model | ArgumentDefinition | DefinitionFacet | VarFakeDefinition | Import | S_Experiment);

ActionDefinition:
	S_Action | ActionFakeDefinition | S_Definition | TypeDefinition;

// Fake Definitions produced by the global scope provider
UnitFakeDefinition:
	'**unit*' name=ID;

TypeFakeDefinition:
	'**type*' name=ID;

ActionFakeDefinition:
	'**action*' name=Valid_ID;

SkillFakeDefinition:
	'**skill*' name=ID;

VarFakeDefinition:
	'**var*' name=Valid_ID;

EquationFakeDefinition:
	'**equation*' name=Valid_ID;

Valid_ID:
	_SpeciesKey | _ImageLayerKey | _DoKey | _ReflexKey | _VarOrConstKey | _1Expr_Facets_BlockOrEnd_Key | _EquationsKey | ID |
	_ExperimentKey;

/**
 * Terminals
 */
TerminalExpression:
	StringLiteral |
	{IntLiteral} op=INTEGER |
	{DoubleLiteral} op=DOUBLE |
	{BooleanLiteral} op=BOOLEAN |
	{ReservedLiteral} op=KEYWORD;

StringLiteral:
	op=STRING;

terminal KEYWORD:
	'each' | 'self' | 'myself' | 'nil' | 'super';

terminal INTEGER:
	'0' | ('1'..'9' ('0'..'9')*);

terminal BOOLEAN:
	'true' | 'false';

terminal ID:
	"2d" | "3d" | "2D" | "3D" | (('a'..'z' | 'A'..'Z' | '_' | '$') ('a'..'z' | 'A'..'Z' | '_' | '$' | '0'..'9')*);

terminal DOUBLE:
	'1'..'9' ('0'..'9')* ('.' '0'..'9'+)? (('E' | 'e') ('+' | '-')? '0'..'9'+)? | '0' ('.' '0'..'9'+)? (('E' | 'e') ('+'
	|
	'-')? '0'..'9'+)?;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | '\\') | !('\\' | '"'))* '"' | "'" ('\\' ('b' | 't' | 'n' | 'f'
	|
	'r' | 'u' | "'" | '\\') | !('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;
